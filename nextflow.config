params {

	// WORKFLOW PARAMETERS TO REVIEW AT EACH RUN
	// ----------------------------------------

	// File path to fastqs to search
	fastq_dir          = null

	// Optional sequences to query in FASTA format. If not provided,
	// NCBI nt will be used
	ref_fasta          = null

	// Database cache for downloaded or previously computed databases and indices
	db_cache           = "${projectDir}/databases"

	// Desired k-mer size K
	k                  = 31

	// Where to place results
	results            = "${launchDir}/results"

	// Which tool to use for classification (the default is sourmash)
	tools              = null
	all                = null
	sylph              = null
	sourmash           = null
	gottcha2           = null
	megan              = null
	kmcp               = null
	strobealign        = null

	// whether to watch for reads in this directory to classify them in real time
	realtime_dir       = null

	// whether to download databases registered in the scidataflow manifest
	download           = null

	// download only mode for only downloading Nt, but not running
	// any classification
	download_only      = null

	// whether to empty the work directory after the workflow
	// successfully finishes
	cleanup            = null


	// TOOL-SPECIFIC SETTINGS
	// ----------------------
	sylph_tax_dir      = "${params.db_cache}/sylph_tax"
	sylph_taxonomy     = "GTDB_r220 IMGVR_4.1"
	gottcha2_db        = "${projectDir}/gottcha2_species"


	// WORKFLOW PARAMETERS THAT SHOULD NOT BE CHANGED
	// ----------------------------------------
	date               = new java.util.Date().format('yyyyMMdd')

	// Find number of CPUs on system or node
	available_cpus     = Runtime.getRuntime().availableProcessors()

	// CPUs to use when sharing
	params.shared_cpus = Math.floor(params.available_cpus / 2)

	// directory for workflow resource files
	resources          = "${projectDir}/resources"

	// SciDataFlow data manifest file
	data_manifest      = "${projectDir}/data_manifest.yml"
}


// WHETHER TO GENERATE A REPORT OF RUN STATISTICS
report {
	enabled   = true
	overwrite = true
	file      = "${params.results}/report.html"
}


// WHETHER TO GENERATE A VISUALIZATION OF THE WORKFLOW
dag {
	enabled   = true
	overwrite = true
	file      = 'watch-hashbrowns-cook.png'
}


// WHETHER TO REMOVE TEMPORARY FILES AFTER A SUCCESSFUL RUN
cleanup = params.cleanup


// PROFILE OPTIONS
profiles {

	standard {

		apptainer.enabled = false
		docker.enabled    = false
		conda.enabled     = false
		process.executor  = 'local'
	}

	docker {

		docker.enabled    = true
		docker.temp       = 'auto'
		apptainer.enabled = false
		conda.enabled     = false

		process.container = "nrminor/hash-browns:v0.0.4"
	}

	apptainer {

		apptainer.enabled = true
		docker.enabled    = false
		conda.enabled     = false

		process.container = "nrminor/hash-browns:v0.0.4"
	}

	local {

		apptainer.enabled = false
		docker.enabled    = false
		conda.enabled     = false
		process.executor  = 'local'
	}
}


// MANIFEST
manifest {
	homePage      = 'https://github.com/nrminor/hash-browns'
	mainScript    = 'main.nf'
	defaultBranch = 'main'
	description   = 'Metagenomic read classification well done.'
	author        = 'Nicholas R. Minor'
}
